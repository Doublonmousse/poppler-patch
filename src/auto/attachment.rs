// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "PopplerAttachment")]
    pub struct Attachment(Object<ffi::PopplerAttachment, ffi::PopplerAttachmentClass>);

    match fn {
        type_ => || ffi::poppler_attachment_get_type(),
    }
}

impl Attachment {
    pub const NONE: Option<&'static Attachment> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Attachment>> Sealed for T {}
}

pub trait AttachmentExt: IsA<Attachment> + sealed::Sealed + 'static {
    //#[cfg(feature = "v20_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v20_9")))]
    //#[doc(alias = "poppler_attachment_get_checksum")]
    //#[doc(alias = "get_checksum")]
    //fn checksum(&self) -> /*Ignored*/Option<glib::String> {
    //    unsafe { TODO: call ffi:poppler_attachment_get_checksum() }
    //}

    #[cfg(feature = "v20_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v20_9")))]
    #[doc(alias = "poppler_attachment_get_ctime")]
    #[doc(alias = "get_ctime")]
    fn ctime(&self) -> Option<glib::DateTime> {
        unsafe {
            from_glib_none(ffi::poppler_attachment_get_ctime(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v20_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v20_9")))]
    #[doc(alias = "poppler_attachment_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::poppler_attachment_get_description(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v20_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v20_9")))]
    #[doc(alias = "poppler_attachment_get_mtime")]
    #[doc(alias = "get_mtime")]
    fn mtime(&self) -> Option<glib::DateTime> {
        unsafe {
            from_glib_none(ffi::poppler_attachment_get_mtime(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v20_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v20_9")))]
    #[doc(alias = "poppler_attachment_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::poppler_attachment_get_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg(feature = "v20_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v20_9")))]
    #[doc(alias = "poppler_attachment_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> usize {
        unsafe { ffi::poppler_attachment_get_size(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "poppler_attachment_save")]
    fn save(&self, filename: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::poppler_attachment_save(
                self.as_ref().to_glib_none().0,
                filename.to_glib_none().0,
                &mut error,
            );
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    //#[doc(alias = "poppler_attachment_save_to_callback")]
    //fn save_to_callback<P: FnMut(&Vec<u8>, usize, Option<&glib::Error>) -> bool>(&self, save_func: P) -> Result<(), glib::Error> {
    //    unsafe { TODO: call ffi:poppler_attachment_save_to_callback() }
    //}

    #[cfg(feature = "v21_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v21_12")))]
    #[doc(alias = "poppler_attachment_save_to_fd")]
    fn save_to_fd(&self, fd: i32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok =
                ffi::poppler_attachment_save_to_fd(self.as_ref().to_glib_none().0, fd, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl<O: IsA<Attachment>> AttachmentExt for O {}
